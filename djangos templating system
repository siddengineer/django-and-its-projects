Django templates are HTML files that define the structure and layout of your web pages. They allow you to:

Render dynamic content (data from your models or views).

Include conditionals, loops, and filters to customize the page content.

Reuse common elements across multiple pages using template inheritance.

2. Basic Template Syntax
Templates in Django use a combination of HTML and template tags. Template tags are enclosed in {% %} and variables are enclosed in {{ }}.

Example:

<!DOCTYPE html>
<html>
<head>
    <title>{{ title }}</title>
</head>
<body>
    <h1>{{ header }}</h1>
    <p>{{ content }}</p>
</body>
</html>
Here:

{{ title }}, {{ header }}, and {{ content }} are template variables.

{% %} tags are used to execute logic (such as conditions, loops, etc.).


3. Rendering a Template
In Django, views are responsible for rendering templates. You can render a template using the render() function in your view.

Example View:

from django.shortcuts import render

def home(request):
    context = {
        'title': 'Home Page',
        'header': 'Welcome to My Website',
        'content': 'This is the homepage.'
    }
    return render(request, 'home.html', context)
Explanation:
context: This is a dictionary that contains the variables that will be replaced in the template.

render(request, 'home.html', context): This function renders the home.html template with the given context data.
4. Template Tags
Django provides a variety of template tags for logic and control structures within templates. These tags are enclosed within {% %}.

Common Template Tags:
{% if %}: Conditional statements

{% for %}: Looping through lists

{% block %}: Block for inheritance

{% include %}: Including another template

{% extends %}: Template inheritance





{% if user.is_authenticated %}
    <p>Hello, {{ user.username }}!</p>
{% else %}
    <p>Please log in.</p>
{% endif %}

<ul>
    {% for item in items %}
        <li>{{ item.name }}</li>
    {% endfor %}
</ul>

{% if user.is_authenticated %}: Checks if the user is logged in.

{% for item in items %}: Loops through a list called items and renders the name of each item.


5. Template Filters
Django filters are used to modify variables in the template, such as formatting dates or text.

Filters are applied to variables using the | (pipe) symbol.

Common Filters:
date: Format a date variable.

length: Return the length of an iterable.

default: Provide a default value if the variable is undefined.

lower: Convert text to lowercase.

default_if_none: Set a default value if the variable is None.


<p>{{ user.username|lower }}</p>  <!-- Converts username to lowercase -->
<p>{{ date_of_birth|date:"F j, Y" }}</p>  <!-- Formats a date -->
<p>{{ text|default:"No description available" }}</p>  <!-- Uses a default if text is empty -->

6. Template Inheritance
Template inheritance allows you to define a base layout with common elements (like a header or footer) and then extend it for different pages. This keeps your templates DRY (Donâ€™t Repeat Yourself)

<!DOCTYPE html>
<html>
<head>
    <title>{% block title %}My Website{% endblock %}</title>
</head>
<body>
    <header>
        <h1>My Website</h1>
    </header>
    <nav>
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/about/">About</a></li>
        </ul>
    </nav>

    <main>
        {% block content %}
        {% endblock %}
    </main>

    <footer>
        <p>&copy; 2025 My Website</p>
    </footer>
</body>
</html>


{% extends "base.html" %}

{% block title %}Home - My Website{% endblock %}

{% block content %}
    <h2>Welcome to the homepage!</h2>
    <p>This is the home page content.</p>
{% endblock %}


 Static Files in Templates
Static files (CSS, JavaScript, images) are not part of the template itself, but you can include them in your templates using the {% static %} tag.

Steps to use static files:
Create a static directory in your app or project.

Load static files using {% load static %} at the top of your template.

Link static files in your template using the {% static %} tag


{% load static %}

<link rel="stylesheet" href="{% static 'css/styles.css' %}">
<script src="{% static 'js/scripts.js' %}"></script>
<img src="{% static 'images/logo.png' %}" alt="Logo">


 Template Context
Context is a dictionary passed from the view to the template. It contains all the variables that will be used in the template.

Example of context in views:

def product_view(request):
    product = Product.objects.get(id=1)
    context = {
        'product': product,
        'title': product.name
    }
    return render(request, 'product.html', context)


In this example:

product is an object retrieved from the database.

The context dictionary is passed to the product.html template, where you can access product.name, product.price, etc.


9. Template Tags for Advanced Features
Django also provides various template tags for advanced functionality like including content conditionally, looping over data, and even working with forms.

Example of a Form Rendering:

<form method="POST">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Submit</button>
</form>
{{ form.as_p }}: Renders each field in the form as a <p> element.

{% csrf_token %}: Ensures CSRF protection for POST requests.

10. Custom Template Tags and Filters
Django allows you to create custom template tags and filters if the built-in ones do not meet your needs. These can be defined in a Python module inside your app, such as templatetags/.

Example of a Custom Template Filter:
Create a file templatetags/custom_filters.py:


from django import template

register = template.Library()

@register.filter
def multiply(value, arg):
    return value * arg
Use the custom filter in a template:

{% load custom_filters %}

<p>{{ 5|multiply:10 }}</p>  <!-- Output will be 50 -->









