1. Model-View-Template (MVT) in Django
Model: Represents the data structure or business logic.

View: Handles the user interface logic (the HTTP request handling).

Template: The HTML presentation layer (where you display the data from the view).

MVC (Traditional) | MVT (Django)
Model | Model
View | Template
Controller | View

Model (both in MVC and MVT): Defines the data and database structure. It represents the business logic and manages the database interactions. In Django, this is defined by the models.py file.

View (in MVC): In traditional MVC, the View handles the user interface and interacts directly with the user. It displays the data passed by the Controller.

Template (in MVT): In Django, the Template is the presentation layer (HTML, CSS). It is responsible for displaying the data and user interface but doesn't handle the logic of the page.

Controller (in MVC): In traditional MVC, the Controller receives the input, processes it (possibly modifying the model), and returns the output. It links the user interface with the business logic.

View (in MVT): In Django, the View refers to the function that processes HTTP requests, interacts with models, and returns HTTP responses. It combines the logic and decision-making process and can use templates to render HTML.

3. How MVT Works in Django
Django’s MVT architecture works like this:

Model:

The model defines the database schema and the data structure.

It is responsible for interacting with the database, performing queries, and retrieving or saving data.

In Django, models are defined as Python classes in the models.py file, and Django automatically creates database tables based on these models.


from django.db import models

class Article(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    published_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

View:

In Django, the view handles the business logic of the application.

A view function receives an HTTP request, interacts with the model, and returns an HTTP response, usually rendered using a template.

Views can query the database, handle form submissions, and return data to the template.

from django.shortcuts import render
from .models import Article

def article_list(request):
    articles = Article.objects.all()
    return render(request, 'article_list.html', {'articles': articles})



Template:

The template is responsible for rendering the HTML.

It takes the context data passed by the view and generates the final HTML that will be sent to the user's browser.

Templates in Django use a powerful templating engine that supports variables, loops, conditionals, and more.


<!DOCTYPE html>
<html>
<head>
    <title>Articles</title>
</head>
<body>
    <h1>Article List</h1>
    <ul>
        {% for article in articles %}
            <li>{{ article.title }} - {{ article.published_at }}</li>
        {% endfor %}
    </ul>
</body>
</html>

4. Workflow Example
Here’s how Django’s MVT workflow typically works:

User Request: A user visits a URL in the web browser (e.g., http://example.com/articles/).

URL Routing:

Django’s URL dispatcher (defined in urls.py) maps the incoming URL to a corresponding view.

Example in urls.py:
from django.urls import path
from . import views

urlpatterns = [
    path('articles/', views.article_list, name='article_list'),
]

View Processing:

The view function article_list() gets executed.

The view interacts with the model (Article.objects.all()) to fetch the data from the database.

Template Rendering:

The view sends the data (articles) to the template (article_list.html).

The template processes the data and returns the final HTML.

Response:

Django sends the generated HTML back to the user’s browser, displaying the list of articles.


Model (Data Handling):
Models define the structure of your data and provide methods for querying and modifying that data.

Django automatically generates the database schema based on your models.

View (Business Logic):
Views handle the logic of processing user requests, interacting with models, and rendering templates.

A view function is usually a Python function that receives an HTTP request, processes it, and returns an HTTP response.

Template (Presentation Layer):
Templates render the HTML and display dynamic data.

The template is responsible for the structure and layout of the final web page shown to the user.

Django templates use their own templating language for inserting dynamic content, looping, conditionals, and other logic in HTML.



6. Example of Complete Workflow in Django (MVT)
Model (models.py):


class Blog(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()

    def __str__(self):
        return self.title
View (views.py):

from django.shortcuts import render
from .models import Blog

def blog_list(request):
    blogs = Blog.objects.all()
    return render(request, 'blog_list.html', {'blogs': blogs})
Template (blog_list.html):

<h1>Blog List</h1>
<ul>
    {% for blog in blogs %}
        <li>{{ blog.title }} - {{ blog.content }}</li>
    {% endfor %}
</ul>
URL Configuration (urls.py):


from django.urls import path
from . import views

urlpatterns = [
    path('blogs/', views.blog_list, name='blog_list'),
]









